#!/bin/bash
project_root="."
project_name="$(basename $(pwd))"
dir_src="src"
create=0
action="exit"

function usage() {
    echo "usage: duck <options> "
    echo ""
    echo "Available options :"
    echo ""
    echo "name             usage                      description"
    echo "---------------  -------------------------  ---------------------------------"
    echo "class            duck class <action> [opt]  tools for classes"
    echo "compile          duck compile [env]         project compiler"
    echo "run              duck run [target-version]  run project (no arg->last version)"
    echo "project-version  duck pv [show|set|inc]     configuration for project version"
    echo "tar              duck tar                   backup 'src/' dir into a tarball"
    echo "quick-commit     duck qc [custom-msg]       alias git add *, commit, push"
    echo "help             duck help                  shows this message"
    echo "doc              duck doc [command]         shows command's help message"
}

function classUsage() {
    echo "usage: duck class <action> [option] "
    echo ""
    echo "Available types :"
    echo ""
    echo "name         description"
    echo "------       ------------------------------------"
    echo "create       creates a c++ class (with unit test)"
    echo "rm           removes a c++ class (move to junk/)"
    echo "list         list project's c++ classes"
}

function classCreateUsage() {
    echo "usage: duck class create <name> "
}
function classDelUsage() {
    echo "usage: duck class rm <name> "
}

function project_version_usage() {
    echo "usage: duck pv <options> "
    echo ""
    echo "Available options :"
    echo ""
    echo "name   usage                        description"
    echo "----   --------------------------   ---------------------------------------"
    echo "show   duck pv                      show actual project version"
    echo "set    duck pv set <version>        set project major version"
    echo "inc    (beta)duck pv inc [amount]   increments actual project major version"
}

if [ -z "$1" ];then
    usage
    exit 1
fi

while [ "$1" != "" ]; do
    case $1 in
        qc | quick-commit)      action="quick_commit"
                                shift
                                msg=$1
                                ;;
        class )                 shift
                                case $1 in
                                            create)     shift
                                                        name=$1
                                                        action="classCreate"
                                                        ;;
                                            list| l)    action="classList"
                                                        ;;
                                            rm | del)   action="classDel"
                                                        shift
                                                        name=$1
                                                        ;;
                                            *)          classUsage
                                                        exit 1
                                                        ;;
                                esac
                                ;;
        compile | -c)           action="compile"
                                shift
                                version_env=$1
                                ;;
        run | -r)               action="run"
                                shift
                                target=$1
                                ;;
        project-version | pv)   shift
                                case $1 in
                                            set)    action="project_version_set"
                                                    shift
                                                    set_version=$1
                                                    ;;
                                            inc)    action="project_version_inc"
                                                    shift
                                                    amount=$1
                                                    ;;
                                            show|"")     action="project_version_show"
                                                    ;;
                                            *)      project_version_usage
                                                    exit 1
                                                    ;;
                                esac
                                ;;
        tar | -t)               action="source_archive"
                                ;;
 doc | help | -h | --help )     shift
                                if [ -z "$1" ]; then
                                    usage
                                    exit 0
                                fi
                                case $1 in
                                    class)              classUsage
                                                        exit 0
                                                        ;;
                                    pv|project-version) project_version_usage
                                                        exit 0
                                                        ;;
                                    *)                  echo "No help section for $1"
                                                        usage
                                                        exit 1
                                                        ;;
                                esac
                                usage
                                exit
                                ;;
        * )                     usage
                                exit 1
        esac
        shift
done

function quick_commit() {
    if [ -z "$msg" ]; then
        msg="Quick commit"
        echo "Using default commit message '$msg'"
    fi
    git add *
    if [ ! $? -eq 0 ]; then
        echo "error during 'git add'."
        exit 1
    fi
    git commit -m "Quick commit"
    if [ ! $? -eq 0 ]; then
        echo "error during 'git commit'."
        exit 1
    fi
    git push > /dev/null 2> /dev/null &
    echo "Committed successfully, pushing in background"
    exit 0
}

function classList() {
    for i in src/classes/*
    do
        echo "$(basename $i)"
    done
    exit 0
}

function classDel() {
    if [ -z $name ]; then
        classDelUsage
        exit 1
    fi
    if [ ! -d "$dir_src/classes/$name" ];then
        echo "error : no such class '$name' (looking in $dir_src/classes/)"
        classDelUsage
        exit 1
    fi
    echo -n "You will delete '$dir_src/classes/$name/*'. Confirm ? [y/n] "
    read confirm
    case $confirm in
        y|Y) ;;
        *) exit 1;;
    esac
    mv $dir_src/classes/$name junk/
    echo "Class $name moved to junk"
    exit 0
}

function classCreate() {
    if [ -z "$name" ];then
        classCreateUsage
        exit 1
    fi

    mkdir $project_root/$dir_src/classes/$name
    touch $project_root/$dir_src/classes/$name/$name.class.cpp
    touch $project_root/$dir_src/classes/$name/$name.class.hpp
    touch $project_root/$dir_src/classes/$name/$name.test.cpp
    for i in $project_root/$dir_src/classes/$name/*; do
        echo "// Project $project_name [duck managed]" >> $i
        echo "// Class $name ($dir_src/classes/$name/$(basename $i))" >> $i
    done
    name_upper=$(echo "$name" | awk '{print toupper($0)}')
    echo >> $project_root/$dir_src/classes/$name/$name.class.cpp\
    "#ifndef ${name_upper}_CLASS_CPP
#define ${name_upper}_CLASS_CPP

//$name class methods implementation

#include \"$name.class.hpp\"

//class constructor
$name::$name() {
    // object initialization
}

#endif"

    echo >> $project_root/$dir_src/classes/$name/$name.class.hpp\
    "#ifndef ${name_upper}_CLASS_HPP
#define ${name_upper}_CLASS_HPP
    
//$name class definition

class $name
{
public:
    $name(); //class constructor
    ~$name();
        
};

#endif"

    echo >> $project_root/$dir_src/classes/$name/$name.test.cpp\
    "#ifndef ${name_upper}_TEST_CPP
#define ${name_upper}_TEST_CPP

//$name class unit test

#include <iostream>
#include \"$name.class.hpp\"
#include \"../../config/UnitTests.hpp\"

int main(int argc, char const *argv[])
{
    unsigned int err = 0;
    $name a;

    /*
        unit tests here
        use macro SHOULD_BE_TRUE(expression) and SHOULD_BE_FALSE(expression)
        to increment err when errors
    */
        
    if(err) {
        cout << 'Test failed with ' << err << ' errors.' << endl;
        return -1;
    }

    cout << 'Test executed successfully' << endl;
    return 0;
}

#endif"

    echo >> $project_root/$dir_src/classes/$name/$name.test.dep\
    "$dir_src/classes/$name/$name.class.cpp"


    echo "Successfully created $type $name"
    exit 0
}

function compile() {
    if [ -z "$version_env" ]; then
        export COMPILE_ENV="dev"
    else
        export COMPILE_ENV=$version_env
    fi

    dir_build="build"

    rm ./.DS_Store 2> /dev/null
    rm */.DS_Store 2> /dev/null
    rm */*/.DS_Store 2> /dev/null
    rm */*/*/.DS_Store 2> /dev/null

    version=$(cat config/compile_version_base)
    suffix=$(cat config/compile_version_suffix)
    suffix=$(($suffix+1))
    log_compile_path="logs/compile.logs"

    echo "Compilation de '$dir_build/$COMPILE_ENV-$version.$suffix.exe'..."
    echo "[$(date)] ++ Compilation de '$dir_build/$COMPILE_ENV-$version.$suffix.exe' ..." >> $log_compile_path

    g++ src/main.cpp src/classes/*/*.class.cpp -o $dir_build/$COMPILE_ENV-$version.$suffix.exe -Wall

    if [ $? -eq 0 ]; then
        echo $suffix > config/compile_version_suffix
        echo "$COMPILE_ENV-$version.$suffix.exe" > config/last_version
        echo "Compilation r√©ussie"
    fi

    git add $log_compile_path $dir_build/$COMPILE_ENV-$version.$suffix.exe > /dev/null 2> /dev/null
    git commit -m "Compilation de '$dir_build/dev-$version.$suffix.exe' ..." > /dev/null 2> /dev/null
    git push > /dev/null 2> /dev/null &
    echo "Commit & push to git in background"
    exit 0
}

function run() {
    if [ -z $target ]; then
        echo "No target specified, taking last version by default."
        cat config/last_version > /dev/null 2> /dev/null
        if [ ! $? -eq 0 ]; then
            echo "Error : No last version found. (looking in config/last_version)"
            exit 1
        else
            target="$(cat config/last_version)"
            ls $target > /dev/null 2> /dev/null
            if [ ! $? -eq 0 ]; then
                echo "Error : last version ($target as set in config/last_version) doesn't seem to exist."
                exit 1
            fi
        fi
    else
        ls build/*-$target.exe >/dev/null 2> /dev/null
        if [ ! $? -eq 0 ];then
            echo "$target : targetted version not found. (ls build/*-$target.exe returned errors)"
            exit 1
        else
            target=$(ls build/*-$target.exe)
        fi
    fi
    echo "Running '$target' ..."
    echo ""
    $target
    exit 0
}

function project_version_set() {
    actual_version=$(cat config/compile_version_base)
    # TODO solve this (: integer expression expected (for if [ -lt ] ))
    #if [ $set_version -lt $actual_version ];then
    #    echo "Warning ! Changing version from $actual_version to earlier $set_version."
    #    echo "This may cause troubles in versioning."
    #    echo "Do you wish to continue ? [y/N]"
    #    prompt yesorno
    #    case $yesorno in
    #        yY) echo "Continuing"
    #            ;;
    #        *) exit 1
    #            ;;
    #    esac
    #fi

    echo $set_version > config/compile_version_base
    echo "-1" > config/compile_version_suffix
    echo "Version succesfully changed."
    echo "Next compile version : $set_version.0"
    exit 0
}

function project_version_inc() {
    echo "Warning ! This function may not work properly. Please use 'duck pv set' instead."
    if [ -z $amount ]; then
        echo "No amount specified, taking 0.1 by default"
        amount=0.1
    fi
    actual_version="$(cat config/compile_version_base)"
    
    echo -n "Project version : $actual_version -> "
    actual_version="$(echo "$actual_version+$amount"|bc)"
    if [ $(echo $actual_version |grep ".*") = $actual_version ]; then
        actual_version="0$actual_version"
    fi
    echo "$actual_version"
    echo "$actual_version" > config/compile_version_base
    exit 0
}

function project_version_show() {
    echo "$(cat config/compile_version_base).$(cat config/compile_version_suffix)"
    exit 0
}

function source_archive() {
    mkdir "backups" 2> /dev/null
    path="backups/$(cat config/compile_version_base).$(cat config/compile_version_suffix).$(date "+%d-%m-%y.%Hh%M").tar"
    echo "Archiving source code to $path"
    tar -cf $path src
    exit 0
}

$action